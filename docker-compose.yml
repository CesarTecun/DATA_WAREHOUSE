networks:
  dw_net:

services:
  postgres_dw:
    image: postgres:15
    container_name: postgres_dw
    hostname: postgres_dw
    restart: unless-stopped
    environment:
      POSTGRES_DB: dw_transito
      POSTGRES_USER: dw_user
      POSTGRES_PASSWORD: dw_password
    ports:
      - "5432:5432"
    volumes:
      - dw_data:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d
      - ./data:/app/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dw_user -d dw_transito"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - dw_net

  etl:
    build:
      context: ./db/etl
      dockerfile: Dockerfile
    container_name: dw_etl
    restart: "no"
    depends_on:
      - postgres_dw
    volumes:
      - ./data:/app/data
      - ./db/transform:/app/transform
      - ./db/etl:/app/etl_scripts
    working_dir: /app
    command: >
      sh -c "
        echo '⏳ Esperando a que Postgres levante…';
        sleep 10;
        export PGPASSWORD=dw_password;

        # 1) Cargar CSV planos a las tablas STG
        psql -h postgres_dw -U dw_user -d dw_transito -c \"\\copy stg_hechos FROM '/app/data/stg_hechos.csv' CSV HEADER;\" &&
        psql -h postgres_dw -U dw_user -d dw_transito -c \"\\copy stg_fallecidos FROM '/app/data/stg_fallecidos.csv' CSV HEADER;\" &&
        psql -h postgres_dw -U dw_user -d dw_transito -c \"\\copy stg_vehiculos FROM '/app/data/stg_vehiculos.csv' CSV HEADER;\" &&

        # 2) Transformar STG_RAW → OLTP
        psql -h postgres_dw -U dw_user -d dw_transito -f /app/transform/load_hechos.sql &&
        psql -h postgres_dw -U dw_user -d dw_transito -f /app/transform/load_victimas.sql &&
        psql -h postgres_dw -U dw_user -d dw_transito -f /app/transform/load_vehiculos.sql &&

        # 3) Actualizar contadores en HECHOS
        python3 /app/etl_scripts/actualizar_contadores.py &&

        # 4) Generar CSV planos
        python3 /app/etl_scripts/generar_accidentes_csv.py &&

        # 5) Poblar el Data Warehouse dimensional
        python3 /app/etl_scripts/populate_dw_updated.py

        echo '✅ ETL completo';
      "
    networks:
      - dw_net
  # Servicio temporal para crear la base de datos de Metabase
  init_metabase_db:
    image: postgres:15
    container_name: init_metabase_db
    depends_on:
      postgres_dw:
        condition: service_healthy
    environment:
      - PGPASSWORD=${POSTGRES_PASSWORD}
      - PGUSER=${POSTGRES_USER}
      - PGHOST=postgres_dw
    volumes:
      - ./init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    entrypoint: ["/bin/bash", "-c", "chmod +x /docker-entrypoint-initdb.d/init-db.sh && /docker-entrypoint-initdb.d/init-db.sh"]
    networks:
      - dw_net

  metabase:
    image: metabase/metabase:latest
    container_name: metabase_dw
    restart: unless-stopped
    ports:
      - "3000:3000"
    depends_on:
      postgres_dw:
        condition: service_healthy
      init_metabase_db:
        condition: service_completed_successfully
    environment:
      MB_DB_TYPE: postgres
      MB_DB_DBNAME: metabase_config
      MB_DB_PORT: 5432
      MB_DB_USER: dw_user
      MB_DB_PASS: dw_password
      MB_DB_HOST: postgres_dw
      MB_DB_CONNECTION_URI: "jdbc:postgresql://postgres_dw:5432/metabase_config?user=dw_user&password=dw_password"
      JAVA_TIMEZONE: America/Guatemala
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    volumes:
      - metabase_data:/metabase-data
    networks:
      - dw_net

volumes:
  dw_data:
  metabase_data:
